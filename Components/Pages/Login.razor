@page "/login"
@using System.ComponentModel.DataAnnotations
@using FluentValidation
@using PartyBookingClient.Backend

@inject IDialogService DialogService
@inject NavigationManager NavManager
@inject DatabaseStore Database

<PageTitle>Log-In</PageTitle>


    <MudCard Class="mx-auto" Style="width: 600px;">
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" class="d-flex justify-center">
                    <img src="icon-login.png" alt="Logo" style="max-width: 150px;" />
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.h4" Align="Align.Center">Login</MudText>
                </MudItem>
            </MudGrid>
            <MudForm Model="@model" @ref="@form" Validation="@(orderValidator.ValidateValue)" ValidationDelay="0">
                <MudTextField @bind-Value="model.Email" For="@(() => model.Email)" Immediate="true" Label="Email" Required="true"
                              Validation="@(new EmailAddressAttribute() { ErrorMessage = "The email address is invalid" })" />
                <MudTextField @bind-Value="model.Password" For="@(() => model.Password)" Immediate="true" Label="Password"
                              InputType="InputType.Password" Required="true" />
            </MudForm>
            @if (_wrongPassword)
            {
                <MudText Color="Color.Warning">Wrong username or password!</MudText>
            }
        </MudCardContent>
        <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Login</MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Primary" Class="ml-auto" OnClick="@(() => NavManager.NavigateTo("/password"))">Forgot Password</MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Primary" Class="ml-auto" OnClick="@(() => NavManager.NavigateTo("/signup"))">Or create an account</MudButton>
            </MudCardActions>
    </MudCard>

@code {

    [Inject] ISnackbar Snackbar { get; set; }

    MudForm form;

    OrderModelFluentValidator orderValidator = new OrderModelFluentValidator();

    LoginModel model = new LoginModel();

    private bool _wrongPassword = false;

    public class LoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    private async Task Submit()
    {
        await form.Validate();

        if (!Database.CheckDetails(model.Email, model.Password))
        {
            _wrongPassword = true;
            return;
        }
        
        if (form.IsValid)
        {
            Snackbar.Add("Submitted!");
            Database.Login(model.Email);
            if (model.Email == "admin@playland.com")
            {
                NavManager.NavigateTo("/bookingmanagement?isAdmin=true");
            }
            else
            {
                NavManager.NavigateTo("/booking");
            }

        }
    }

    public class OrderModelFluentValidator : AbstractValidator<LoginModel>
    {
        public OrderModelFluentValidator()
        {
            RuleFor(x => x.Email).Cascade(CascadeMode.Stop).NotEmpty().EmailAddress();
            RuleFor(x => x.Password).NotEmpty().Length(6, 100);
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<LoginModel>.CreateWithOptions((LoginModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}