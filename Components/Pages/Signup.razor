@page "/signup"
@using FluentValidation
@using System.ComponentModel.DataAnnotations

<MudContainer MaxWidth="MaxWidth.Large" Class="d-flex justify-center align-center" Style="height: 100vh;">
    <MudCard Class="mx-auto" Style="width: 800px;">
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" class="d-flex justify-center">
                    <img src="icon-login.png" alt="Logo" style="max-width: 150px;" />
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.h4" Align="Align.Center">Sign-Up</MudText>
                </MudItem>
            </MudGrid>
            <MudForm Model="@model" @ref="@form" Validation="@(orderValidator.ValidateValue)" ValidationDelay="0">
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="model.Name" For="@(() => model.Name)" Immediate="true" Label="Name" Required="true" />
                        <MudTextField @bind-Value="model.Email" For="@(() => model.Email)" Immediate="true" Label="Email" Required="true"
                                      Validation="@(new EmailAddressAttribute() { ErrorMessage = "The email address is invalid" })" />
                        <MudTextField @bind-Value="model.Password" For="@(() => model.Password)" Immediate="true" Label="Password"
                                      InputType="InputType.Password" Required="true" />
                        <MudTextField @bind-Value="model.ConfirmPassword" For="@(() => model.ConfirmPassword)" Immediate="true" Label="Confirm Password"
                                      InputType="InputType.Password" Required="true" Validation="@(new Func<string, string>(PasswordMatch))" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="model.Address" For="@(() => model.Address)" Immediate="true" Label="Address" Required="true" />
                        <MudTextField @bind-Value="model.City" For="@(() => model.City)" Immediate="true" Label="City" Required="true" />
                        <MudTextField @bind-Value="model.Country" For="@(() => model.Country)" Immediate="true" Label="Country" Required="true" />
                        <MudTextField @bind-Value="model.ZipCode" For="@(() => model.ZipCode)" Immediate="true" Label="Zip Code" Required="true" />
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Sign-Up</MudButton>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {
    [Inject] ISnackbar Snackbar { get; set; }

    MudForm form;

    OrderModelFluentValidator orderValidator = new OrderModelFluentValidator();

    OrderModel model = new OrderModel();

    public class OrderModel
    {
        public string Name { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }
        public string ConfirmPassword { get; set; }
        public string Address { get; set; }
        public string City { get; set; }
        public string Country { get; set; }
        public string ZipCode { get; set; }
    }

    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            Snackbar.Add("Submitted!");
        }
    }

    private string PasswordMatch(string confirmPassword)
    {
        if (confirmPassword != model.Password)
            return "Passwords do not match.";
        return null;
    }

    public class OrderModelFluentValidator : AbstractValidator<OrderModel>
    {
        public OrderModelFluentValidator()
        {
            RuleFor(x => x.Name).NotEmpty().Length(1, 100);
            RuleFor(x => x.Email).Cascade(CascadeMode.Stop).NotEmpty().EmailAddress();
            RuleFor(x => x.Password).NotEmpty().Length(6, 100);
            RuleFor(x => x.Address).NotEmpty().Length(1, 100);
            RuleFor(x => x.City).NotEmpty().Length(1, 100);
            RuleFor(x => x.Country).NotEmpty().Length(1, 100);
            RuleFor(x => x.ZipCode).NotEmpty().Length(1, 10);
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<OrderModel>.CreateWithOptions((OrderModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}
